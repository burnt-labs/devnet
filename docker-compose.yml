services:
  xion:
    image: ghcr.io/burnt-labs/xion/xion:${XION_VERSION:-latest}
    command: >
      /usr/bin/cosmovisor run start \
        --api.address tcp://0.0.0.0:1317 \
        --api.enable true \
        --api.enabled-unsafe-cors true \
        --api.swagger true \
        --grpc.enable true \
        --grpc.address 0.0.0.0:9090 \
        --grpc-web.enable \
        --minimum-gas-prices 0.025uxion \
        --rpc.laddr tcp://0.0.0.0:26657
    entrypoint: /home/xiond/init/entrypoint.sh
    deploy:
      replicas: ${NUM_VALIDATORS:-3}
    environment:
      CHAIN_ID: ${CHAIN_ID}
      DAEMON_HOME: ${DAEMON_HOME}
      DAEMON_NAME: ${DAEMON_NAME}
      DEFAULT_DENOM: ${DEFAULT_DENOM}
      DENOM_METADATA_NAME: ${DENOM_METADATA_NAME}
      GENESIS_AMOUNT: ${GENESIS_AMOUNT}
      GENTX_AMOUNT: ${GENTX_AMOUNT}
      MNEMONIC: ${MNEMONIC}
      MODIFY_GENESIS_JQ: ${MODIFY_GENESIS_JQ}
      NUM_VALIDATORS: ${NUM_VALIDATORS:-3}
      SOURCE_CHAIN_ID: ${SOURCE_CHAIN_ID:-""}
      SOURCE_CHAIN_RPC: ${SOURCE_CHAIN_RPC:-""}
      SOURCE_CHAIN_CODE_IDS: ${SOURCE_CHAIN_CODE_IDS:-()}
    ports: # notice: host_port:container_port
      - 1317
      - 26656
      - 26657
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:26657/status"]
      interval: 5s
      timeout: 5s
      retries: 5
    user: root
    working_dir: /home/${DAEMON_NAME}
    networks:
      - default
    volumes:
      - /home/${DAEMON_NAME}
      - shared:/home/${DAEMON_NAME}/.shared
      - ./scripts/init:/home/${DAEMON_NAME}/init

  xion-aa-api:
    build:
      context: ./xion-aa-api
#    environment:
#      AWS_ACCESS_KEY_ID: "test"
#      AWS_SECRET_ACCESS_KEY: "test"
#      AWS_REGION: "us-east-1"
    ports: # notice: host_port:container_port
      - "8787:8787"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/healthz/readiness"]
    networks:
      - default

  xion-dashboard:
    build:
      context: xion-dashboard-app/
      args:
        ENV_FILE: .env.example
    ports:
      - "4173:4173"
    depends_on:
      "xion-aa-api":
        condition: service_healthy
    user: root
    networks:
      - default

  xion-staking:
    build:
      context: ./xion-staking
    environment:
      ENV NEXT_PUBLIC_IS_DEPLOYMENT: "false"
      NEXT_PUBLIC_IS_PRO_MODE: "false"
      NEXT_PUBLIC_NETWORK_TYPE: "testnet"
      NEXT_PUBLIC_RPC_ENDPOINT: "http://localhost:26657"
      VITE_FEE_GRANTER_ADDRESS: "xion1e2fuwe3uhq8zd9nkkk876nawrwdulgv460vzg7"
    ports: # notice: host_port:container_port
      - "8788:8788"
    depends_on:
      "xion-aa-api":
        condition: service_healthy
    #user: root
    networks:
      - default

  xion-explorer:
    build:
      context: xion-explorer/
      args:
        VITE_DEPLOYMENT_ENV: devnet
    ports: # notice: host_port:container_port
      - "3000:3000"
    #user: root
    networks:
      - default

  xion-developer-portal:
    build:
      context: xion-developer-portal/
      args:
        VITE_DEPLOYMENT_ENV: .env.testnet2
    ports: # notice: host_port:container_port
      - "3001:3000"
    depends_on:
      "xion-dashboard":
        condition: service_healthy
    user: root
    networks:
      - default

  xion-faucet:
    build:
      context: xion-faucet/
      args:
        ENV_FILE: .env.devnet
    ports: # notice: host_port:container_port
      - "3002:3000"
    #user: root
    networks:
      - default

  xion-faucet-reloader:
    build:
      context: xion-faucet/server/reloader
      args:
        ENV_FILE: .dev.vars.example
    ports: # notice: host_port:container_port
      - "3003:3000"
    #user: root
    networks:
      - default

  xion-assets:
    build:
      context: xion-assets/
      #args:
      #  ENV_FILE: .env.devnet
    ports: # notice: host_port:container_port
      - "3004:3000"
    #user: root
    networks:
      - default

  postgres:
    build:
      context: ./xion-indexer
      dockerfile: ./docker/pg-Dockerfile
    ports: # notice: host_port:container_port
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine3.19
    ports: # notice: host_port:container_port
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  haproxy:
    image: haproxy:3.1.5-alpine
    ports: # notice: host_port:container_port
      - "1317:1317"
      - "8444:8444"
      - "9090:9090"
      - "26657:26657"
      - "26658:26658"
    volumes:
      - ./scripts/init/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

  localstack:
    image: localstack/localstack
    ports: # notice: host_port:container_port
      - "4566:4566"            # LocalStack Gateway
      - "4571:4571"            # LocalStack SQS port (optional)
      - "4510-4559:4510-4559"  # external services port range
    environment:
      SERVICES: "sqs,secretsmanager,kms"  # Specify the services you want to run (e.g., SQS)
      DEBUG: 1                        # Enable debug logging (optional)
      AWS_ACCESS_KEY_ID: "test"       # Default AWS credentials
      AWS_SECRET_ACCESS_KEY: "test"
      AWS_DEFAULT_REGION: "us-east-1"
    volumes: # NOTICE: make sure that the file is executable [chmod +x scripts/init/init-aws-localstack.sh]
      - "./scripts/bootstrap:/etc/localstack/init/ready.d/"

networks:
  default:

volumes:
  shared: